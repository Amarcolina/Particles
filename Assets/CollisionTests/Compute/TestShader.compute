#pragma kernel Integrate
#pragma kernel ResolveCollisions
#pragma kernel Accumulate_X
#pragma kernel Accumulate_Y
#pragma kernel Accumulate_Z
#pragma kernel Copy
#pragma kernel Sort

#include "Assets/Shaders/ParticleData.cginc"

#define COLLISION_CHUNK_SIDE 64
#define COLLISION_CHUNK_SIZE (1.0 / 28.0)
#define COLLISION_CHUNK_COUNT (COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE)

uniform float3 _Center;

struct DebugData {
  uint tests;
};

uniform int _CapsuleCount;
StructuredBuffer<Capsule> _Capsules;

uniform float3 _PlanePosition;
uniform float3 _PlaneNormal;

RWStructuredBuffer<Particle> _ParticleFront;
RWStructuredBuffer<Particle> _ParticleBack;

RWStructuredBuffer<uint> _Count;

RWStructuredBuffer<uint> _ChunkStart;
RWStructuredBuffer<uint> _ChunkEnd;

RWStructuredBuffer<DebugData> _DebugData;

float noise(float2 n) {
  return frac(sin(dot(n.xy, float2(12.9898, 78.233)))* 43758.5453);
}

uint3 GetChunkPos(float3 position) {
  return (uint3)(position / COLLISION_CHUNK_SIZE + float3(COLLISION_CHUNK_SIDE, COLLISION_CHUNK_SIDE, COLLISION_CHUNK_SIDE) * 0.5);
}

uint GetChunk(uint3 chunkPos) {
  return chunkPos.x + chunkPos.y * COLLISION_CHUNK_SIDE + chunkPos.z * COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE;
}

uint GetChunk(float3 position) {
  return GetChunk(GetChunkPos(position));
}

[numthreads(64, 1, 1)]
void Integrate(uint3 id : SV_DispatchThreadID) {
  uint index = id.x;

  Particle particle = _ParticleFront[index];

  float3 toCenter = (_Center - particle.position);
  float3 forceToCenter = toCenter / (1 + dot(toCenter, toCenter));

  float3 aroundCenter = cross(_Center - particle.position, float3(0, 1, 0));
  float3 forceAroundCenter = aroundCenter / (0.1 + dot(toCenter, toCenter));

  {
    float3 tempPos = particle.position;

    particle.position += 0.9999 * (particle.position - particle.prevPosition);
    //particle.position += forceToCenter * 0.0002;
    particle.position += forceAroundCenter * 0.00001;
    particle.position.y -= 0.0001;

    particle.prevPosition = tempPos;
  }

  //Increment the count of the new box we have landed in
  uint newChunk = GetChunk(particle.position);
  InterlockedAdd(_Count[newChunk], 1);

  _ParticleFront[index] = particle;
}

[numthreads(4, 4, 4)]
void Accumulate_X(uint3 id : SV_DispatchThreadID)
{
  uint start = id.y * COLLISION_CHUNK_SIDE + id.z * COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE;
  uint index = start + id.x;

  uint sum = 0;
  for (uint i = start; i <= index; i++) {
    sum += _Count[i];
  }

  _ChunkStart[index] = sum;
}

[numthreads(4, 4, 4)]
void Accumulate_Y(uint3 id : SV_DispatchThreadID)
{
  uint index = id.x + id.y * COLLISION_CHUNK_SIDE + id.z * COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE;
  uint start = (COLLISION_CHUNK_SIDE - 1) + id.z * COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE;

  uint sum = _ChunkStart[index];
  for (uint i = start; i < index; i += COLLISION_CHUNK_SIDE) {
    sum += _ChunkStart[i];
  }

  _ChunkEnd[index] = sum;
}

[numthreads(4, 4, 4)]
void Accumulate_Z(uint3 id : SV_DispatchThreadID)
{
  uint index = id.x + id.y * COLLISION_CHUNK_SIDE + id.z * COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE;
  uint start = (COLLISION_CHUNK_SIDE - 1) + ((COLLISION_CHUNK_SIDE - 1) * COLLISION_CHUNK_SIDE);

  uint sum = _ChunkEnd[index];
  for (uint i = start; i < index; i += (COLLISION_CHUNK_SIDE * COLLISION_CHUNK_SIDE)) {
    sum += _ChunkEnd[i];
  }

  _ChunkStart[index] = sum;
}

[numthreads(64, 1, 1)]
void Copy(uint3 id : SV_DispatchThreadID) {
  uint index = id.x;

  _ChunkEnd[index] = _ChunkStart[index];
  _Count[index] = 0;
}

[numthreads(64, 1, 1)]
void Sort(uint3 id : SV_DispatchThreadID) {
  uint index = id.x;

  Particle particle = _ParticleFront[index];

  uint chunk = GetChunk(particle.position);

  uint newIndex;
  InterlockedAdd(_ChunkStart[chunk], -1, newIndex);
  newIndex--;

  _ParticleBack[newIndex] = particle;
}

void runParticleCollision(uint index, Particle particle, Particle other, inout float4 depenetration) {
  float3 fromOther = (particle.position - other.position);
  float distSqrd = dot(fromOther, fromOther);

  if (distSqrd < SQR_RADIUS) {
    float deltalength = sqrt(distSqrd);
    fromOther *= -0.5 * (deltalength - RADIUS) / deltalength;
    depenetration += float4(fromOther, 1);

    //fromOther *= SQR_RADIUS / (distSqrd + SQR_RADIUS) - 0.5;
    //depenetration += float4(fromOther, 1);
  }
}

void resolveParticleCollisions3x3(uint index, inout Particle particle) {
  uint3 chunkPos = GetChunkPos(particle.position);

  float4 depenetration = float4(0, 0, 0, 0);
  uint collisions = 0;
  for (int dx = -1; dx <= 1; dx++) {
    for (int dy = -1; dy <= 1; dy++) {
      for (int dz = -1; dz <= 1; dz++) {
        uint3 deltaChunkPos = chunkPos + uint3(dx, dy, dz);
        uint deltaChunk = GetChunk(deltaChunkPos);

        uint start = _ChunkStart[deltaChunk];
        uint end = _ChunkEnd[deltaChunk];

        for (uint i = start; i < end; i++) {
          if (i == index) continue;

          Particle other = _ParticleBack[i];
          runParticleCollision(index, particle, other, depenetration);
        }
      }
    }
  }

  if (depenetration.w > 0) {
    particle.position += depenetration.xyz / depenetration.w;
  }
}

void doParticleForeach(uint index, uint start, uint end, Particle particle, inout float4 depenetration) {
  for (uint i = start; i < end; i += 1) {
    Particle other = _ParticleBack[i];
    runParticleCollision(index, particle, other, depenetration);
  }
}

void resolveParticleCollisions2x2(uint index, inout Particle particle) {
  float3 chunkFloatPos = particle.position / COLLISION_CHUNK_SIZE + float3(COLLISION_CHUNK_SIDE, COLLISION_CHUNK_SIDE, COLLISION_CHUNK_SIDE) * 0.5;
  uint3 chunkPos = (uint3)chunkFloatPos;

  int3 offset;
  offset.x = 0;
  offset.y = frac(chunkFloatPos.y) > 0.5 ? 1 : -1;
  offset.z = frac(chunkFloatPos.z) > 0.5 ? 1 : -1;

  chunkPos.x += (frac(chunkFloatPos.x) < 0.5) ? -1 : 0;

  float4 depenetration = float4(0, 0, 0, 0);

  int chunkA = GetChunk(chunkPos + int3(0, offset.y, 0));
  int chunkA_Start = _ChunkStart[chunkA];
  int chunkA_End = _ChunkEnd[chunkA + 1];

  doParticleForeach(index, chunkA_Start, chunkA_End, particle, depenetration);

  int chunkB = GetChunk(chunkPos + int3(0, 0, offset.z));
  int chunkB_Start = _ChunkStart[chunkB];
  int chunkB_End = _ChunkEnd[chunkB + 1];

  doParticleForeach(index, chunkB_Start, chunkB_End, particle, depenetration);

  int chunkC = GetChunk(chunkPos + int3(0, offset.y, offset.z));
  int chunkC_Start = _ChunkStart[chunkC];
  int chunkC_End = _ChunkEnd[chunkC + 1];

  doParticleForeach(index, chunkC_Start, chunkC_End, particle, depenetration);

  int chunkD = GetChunk(chunkPos + int3(0, 0, 0));
  uint chunkD_Start = _ChunkStart[chunkD];
  uint chunkD_End = index;

  doParticleForeach(index, chunkD_Start, chunkD_End, particle, depenetration);

  uint chunkE_Start = index + 1;
  uint chunkE_End = _ChunkEnd[chunkD + 1];

  doParticleForeach(index, chunkE_Start, chunkE_End, particle, depenetration);

  if (depenetration.w > 0) {
    particle.position += depenetration.xyz / depenetration.w;
  }
}

[numthreads(64, 1, 1)]
void ResolveCollisions(uint3 id : SV_DispatchThreadID) {
  uint index = id.x;

  //Grab the particle from the front buffer
  Particle particle = _ParticleBack[index];

  float3 originalVel = particle.position - particle.prevPosition;

  //resolveParticleCollisions3x3(index, particle);
  resolveParticleCollisions2x2(index, particle);

  float3 newVel = particle.position - particle.prevPosition;
  float foamFactor = max(0, length(originalVel) - length(newVel));
  particle.color = lerp(particle.color, float3(0, 0, 1), 0.01);
  particle.color += 120 * foamFactor;

  for (int i = 0; i < _CapsuleCount; i++) {
    Capsule capsule = _Capsules[i];

    float3 ba = capsule.b - capsule.a;
    float3 anchor = lerp(capsule.a, capsule.b, saturate(dot(particle.position - capsule.a, ba) / dot(ba, ba)));
    float3 delta = particle.position - anchor;

    if (length(delta) > 0) {
      particle.position = lerp(particle.position, anchor + normalize(delta) * max(capsule.radius, length(delta)), 0.09);
    }
  }

  float boxSize = 0.9;

  float clampHeight = 0.9;
  float clampRadius = 0.9;

  //BOX
  //float3 clamped = clamp(particle.position, -boxSize, boxSize);

  //CYLINDER
  float3 clamped = particle.position;
  clamped.y = clamp(clamped.y, -clampHeight, clampHeight);
  clamped.xz = normalize(clamped.xz) * min(clampRadius, length(clamped.xz));

  //SPHERE
  //float3 clamped = normalize(particle.position) * min(clampRadius, length(particle.position));

  float3 fromPlane = clamped - _PlanePosition;
  float alongPlane = dot(fromPlane, _PlaneNormal);
  if (alongPlane < 0) {
    clamped = lerp(clamped, clamped - _PlaneNormal * alongPlane, 0.05);
  }

  particle.position += 2 * (clamped - particle.position);

  

  float3 disp = particle.position - particle.prevPosition;
  //particle.color = lerp(particle.color, abs(70 * disp), 0.05);

  //Copy the particle into the front buffer
  _ParticleFront[index] = particle;
}