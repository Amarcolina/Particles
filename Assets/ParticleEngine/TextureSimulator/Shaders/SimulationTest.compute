
#pragma kernel UpdateVelocity_1024 STRIDE=1024
#pragma kernel UpdateVelocity_512  STRIDE=512 
#pragma kernel UpdateVelocity_256  STRIDE=256 
#pragma kernel UpdateVelocity_128  STRIDE=128 
#pragma kernel UpdateVelocity_64   STRIDE=64  
#pragma kernel UpdateVelocity_32   STRIDE=32  

#define PARTICLE_RADIUS 0.01
#define PARTICLE_DIAMETER (PARTICLE_RADIUS * 2)

#define _SocialRange 0.5
#define _SocialForce 0.003
#define _CollisionForce 0.005

RWStructuredBuffer<float4> _Positions;
RWStructuredBuffer<float4> _Velocities;

groupshared float4 _cachedParticles[STRIDE];

void UpdateVelocity(uint id, uint stride) {
  uint maxParticles = (4096 / stride) * stride;
  uint offset = id % stride;

  float4 position = _Positions[id];
  float4 velocity = _Velocities[id];
  float4 totalSocialForce = float4(0, 0, 0, -1);

  uint i = 0;
  do {
    _cachedParticles[offset] = _Positions[i + offset];

    for(uint j=0; j<stride; j++, i++){
      float4 otherPosition = _cachedParticles[j];

      half3 toOther = otherPosition.xyz - position.xyz;
      half distance = length(toOther);
      toOther = distance < 0.0001 ? half3(0, 0, 0) : toOther / distance;

      if (distance < PARTICLE_DIAMETER) {
        half penetration = 1 - distance / PARTICLE_DIAMETER;
        velocity.xyz -= toOther * penetration * _CollisionForce;
      }

      if (distance < _SocialRange) {
        totalSocialForce += half4(_SocialForce * toOther, 1);
      }
    }
  } while (i != maxParticles);

  if (totalSocialForce.z > 0.5) {
    velocity.xyz += totalSocialForce.xyz / totalSocialForce.w;
  }

  _Velocities[id] = velocity * 2;
}

void UpdatePosition(uint id) {
  _Positions[id].xyz += _Velocities[id].xyz;
}

//VELOCITY

[numthreads(1024, 1, 1)]
void UpdateVelocity_1024(uint3 id : SV_DispatchThreadID)
{
  UpdateVelocity(id.x, 1024);
}

[numthreads(512, 1, 1)]
void UpdateVelocity_512(uint3 id : SV_DispatchThreadID)
{
  UpdateVelocity(id.x, 512);
}

[numthreads(256, 1, 1)]
void UpdateVelocity_256(uint3 id : SV_DispatchThreadID)
{
  UpdateVelocity(id.x, 256);
}

[numthreads(128, 1, 1)]
void UpdateVelocity_128(uint3 id : SV_DispatchThreadID)
{
  UpdateVelocity(id.x, 128);
}

[numthreads(64, 1, 1)]
void UpdateVelocity_64(uint3 id : SV_DispatchThreadID)
{
  UpdateVelocity(id.x, 64);
}

[numthreads(32, 1, 1)]
void UpdateVelocity_32(uint3 id : SV_DispatchThreadID)
{
  UpdateVelocity(id.x, 32);
}
